---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation template for Snyk and AWS Modernization Workshop
Parameters:
  KubernetesVersion:
    Description: Kubernetes version
    Type: String
    Default: "1.31"

  EKSClusterName:
    Description: Name of EKS Cluster
    Type: String
    Default: "snyk-aws-cluster"

  WorkerNodeInstanceType:
    Description: Worker Node cluster instances
    Type: String
    Default: "t3.large"

  VSCodeInstanceName:
    Description: Name of the VSCode server instance
    Type: String
    Default: "VSCodeServer"
  
    

Resources:
################## PERMISSIONS AND ROLES #################
  snykLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonQDeveloperAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess
      Policies:
      - PolicyName: EKSPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateVpc
                - ec2:DeleteVpc
                - ec2:ModifyVpcAttribute
                - ec2:DescribeVpcs
                - ec2:DescribeVpcAttribute
                - ec2:CreateTags
                - ec2:DeleteTags
                - ec2:DescribeTags
                - ec2:CreateSubnet
                - ec2:DeleteSubnet
                - ec2:ModifySubnetAttribute
                - ec2:DescribeSubnets
                - ec2:CreateRouteTable
                - ec2:DeleteRouteTable
                - ec2:DescribeRouteTables
                - ec2:CreateRoute
                - ec2:DeleteRoute
                - ec2:ReplaceRoute
                - ec2:AssociateRouteTable
                - ec2:DisassociateRouteTable
                - ec2:CreateNatGateway
                - ec2:DeleteNatGateway
                - ec2:DescribeNatGateways
                - ec2:CreateInternetGateway
                - ec2:DeleteInternetGateway
                - ec2:DescribeInternetGateways
                - ec2:AttachInternetGateway
                - ec2:DetachInternetGateway
                - ec2:AllocateAddress
                - ec2:ReleaseAddress
                - ec2:AssociateAddress
                - ec2:DisassociateAddress
                - ec2:DescribeAddresses
                - ec2:CreateEgressOnlyInternetGateway
                - ec2:DeleteEgressOnlyInternetGateway
                - ec2:DescribeEgressOnlyInternetGateways
                - ec2:CreateSecurityGroup
                - ec2:DeleteSecurityGroup
                - ec2:DescribeSecurityGroups
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:RevokeSecurityGroupIngress
                - ec2:AuthorizeSecurityGroupEgress
                - ec2:RevokeSecurityGroupEgress
                - ec2:ModifySecurityGroupRules
                - ec2:DescribeSecurityGroupRules
                - ec2:CreateLaunchTemplate
                - ec2:ModifyLaunchTemplate
                - ec2:DescribeLaunchTemplates
                - ec2:DescribeLaunchTemplateVersions
                - ec2:RunInstances
                - ec2:CreateTags
              Resource: "*"
            
            # IAM Role permissions
            - Effect: Allow
              Action:
                - iam:CreateRole
                - iam:DeleteRole
                - iam:GetRole
                - iam:PassRole
                - iam:ListRoles
                - iam:AttachRolePolicy
                - iam:DetachRolePolicy
                - iam:PutRolePolicy
                - iam:DeleteRolePolicy
                - iam:GetRolePolicy
                - iam:TagRole
                - iam:UntagRole
                - iam:TagPolicy
                - iam:UntagPolicy
                - iam:CreateServiceLinkedRole
                - iam:TagResource
                - iam:UntagResource
                - iam:ListInstanceProfilesForRole
                - iam:CreateInstanceProfile
                - iam:DeleteInstanceProfile
                - iam:GetInstanceProfile
                - iam:AddRoleToInstanceProfile
                - iam:RemoveRoleFromInstanceProfile
                - iam:GetOpenIDConnectProvider
                - iam:CreateOpenIDConnectProvider
                - iam:DeleteOpenIDConnectProvider
                - iam:UpdateOpenIDConnectProviderThumbprint
              Resource: "*"
            
            # EKS specific permissions
            - Effect: Allow
              Action:
                - eks:CreateCluster
                - eks:DeleteCluster
                - eks:DescribeCluster
                - eks:DescribeClusterVersions
                - eks:DescribeAddonConfiguration
                - eks:ListClusters
                - eks:UpdateClusterConfig
                - eks:UpdateClusterVersion
                - eks:DescribeUpdate
                - eks:TagResource
                - eks:UntagResource
                - eks:CreateNodegroup
                - eks:DeleteNodegroup
                - eks:DescribeNodegroup
                - eks:ListNodegroups
                - eks:UpdateNodegroupConfig
                - eks:UpdateNodegroupVersion
                - eks:ListUpdates
                - eks:CreateFargateProfile
                - eks:DeleteFargateProfile
                - eks:DescribeFargateProfile
                - eks:ListFargateProfiles
                - eks:CreateAddon
                - eks:DeleteAddon
                - eks:DescribeAddon
                - eks:ListAddons
                - eks:UpdateAddon
                - eks:DescribeAddonVersions
              Resource: "*"

            - Effect: Allow
              Action:
                - iam:GetOpenIDConnectProvider
                - iam:CreateOpenIDConnectProvider
                - iam:DeleteOpenIDConnectProvider
                - iam:UpdateOpenIDConnectProviderThumbprint
                - iam:TagOpenIDConnectProvider
              Resource: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.${AWS::Region}.amazonaws.com/*"
            
            # CloudFormation related permissions
            - Effect: Allow
              Action:
                - cloudformation:CreateStack
                - cloudformation:UpdateStack
                - cloudformation:DeleteStack
                - cloudformation:DescribeStacks
                - cloudformation:ListStacks
                - cloudformation:GetTemplate
                - cloudformation:ValidateTemplate
                - cloudformation:DescribeStackEvents
                - cloudformation:DescribeStackResource
                - cloudformation:DescribeStackResources
                - cloudformation:GetTemplateSummary
                - cloudformation:ListStackResources
                - cloudformation:TagResource
                - cloudformation:UntagResource
                - cloudformation:SetStackPolicy
                - cloudformation:SignalResource
                - cloudformation:SignalResource
                - cloudformation:DescribeStackResource
              Resource: "*"
            
            # EC2 Instance & Autoscaling permissions
            - Effect: Allow
              Action:
                - ec2:RunInstances
                - ec2:TerminateInstances
                - ec2:DescribeInstances
                - ec2:DescribeInstanceStatus
                - ec2:DescribeInstanceTypes
                - ec2:DescribeInstanceTypeOfferings
                - ec2:StartInstances
                - ec2:StopInstances
                - ec2:RebootInstances
                - ec2:ModifyInstanceAttribute
                - autoscaling:CreateAutoScalingGroup
                - autoscaling:DeleteAutoScalingGroup
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:UpdateAutoScalingGroup
                - autoscaling:CreateLaunchConfiguration
                - autoscaling:DeleteLaunchConfiguration
                - autoscaling:DescribeLaunchConfigurations
                - autoscaling:CreateLaunchTemplate
                - autoscaling:DeleteLaunchTemplate
                - autoscaling:DescribeLaunchTemplates
                - autoscaling:DescribeLaunchTemplateVersions
              Resource: "*"
            
            # General tagging permissions
            - Effect: Allow
              Action:
                - tag:GetResources
                - tag:TagResources
                - tag:UntagResources
                - tag:GetTagKeys
                - tag:GetTagValues
              Resource: "*"
            
            # Load Balancer permissions for EKS services
            - Effect: Allow
              Action:
                - elasticloadbalancing:CreateLoadBalancer
                - elasticloadbalancing:DeleteLoadBalancer
                - elasticloadbalancing:DescribeLoadBalancers
                - elasticloadbalancing:ModifyLoadBalancerAttributes
                - elasticloadbalancing:DescribeLoadBalancerAttributes
                - elasticloadbalancing:CreateTargetGroup
                - elasticloadbalancing:DeleteTargetGroup
                - elasticloadbalancing:DescribeTargetGroups
                - elasticloadbalancing:ModifyTargetGroupAttributes
                - elasticloadbalancing:DescribeTargetGroupAttributes
                - elasticloadbalancing:RegisterTargets
                - elasticloadbalancing:DeregisterTargets
                - elasticloadbalancing:DescribeTargetHealth
                - elasticloadbalancing:CreateListener
                - elasticloadbalancing:DeleteListener
                - elasticloadbalancing:DescribeListeners
                - elasticloadbalancing:ModifyListener
                - elasticloadbalancing:AddTags
                - elasticloadbalancing:RemoveTags
                - elasticloadbalancing:DescribeTags
              Resource: "*"
            
            # Logging permissions
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:DeleteLogGroup
                - logs:DescribeLogGroups
                - logs:CreateLogStream
                - logs:DeleteLogStream
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: "*"
            
            # KMS permissions for EKS encryption
            - Effect: Allow
              Action:
                - kms:Create*
                - kms:Describe*
                - kms:Enable*
                - kms:List*
                - kms:Put*
                - kms:Update*
                - kms:Revoke*
                - kms:Disable*
                - kms:Get*
                - kms:Delete*
                - kms:TagResource
                - kms:UntagResource
                - kms:ScheduleKeyDeletion
                - kms:CancelKeyDeletion
                - kms:GenerateDataKey
                - kms:Encrypt
                - kms:Decrypt
              Resource: "*"
            
            # SSM permissions
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:DeleteParameter
                - ssm:DeleteParameters
                - ssm:DescribeParameters
                - ssm:GetParameterHistory
                - ssm:SendCommand
                - ssm:ListCommandInvocations
                - ssm:ListCommands
                - ssm:GetCommandInvocation
                - ssm:StartSession
                - ssm:TerminateSession
                - ssm:DescribeInstanceInformation
                - ssm:DescribeInstanceAssociationsStatus
              Resource: "*"

            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
              Resource: "*"

            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStackResources
              - ec2:DescribeInstances
              - ec2:DescribeInstanceTypeOfferings
              - ec2:AssociateIamInstanceProfile
              - ec2:ModifyInstanceAttribute
              - ec2:ReplaceIamInstanceProfileAssociation
              - ec2:DescribeIamInstanceProfileAssociations
              - ec2:DescribeVolumes
              - ec2:ModifyVolume
              - ec2:DescribeVolumesModifications
              - ec2:RebootInstances
              - iam:ListInstanceProfiles
              - iam:PassRole
              - ssm:DescribeInstanceInformation
              - ssm:SendCommand
              - ssm:GetCommandInvocation
              - ssm:ListCommandInvocations
              Resource: "*"

  KMSSecretsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "key for EKS secrets encryption"
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action:
            - kms:Create*
            - kms:Describe*
            - kms:Enable*
            - kms:List*
            - kms:Put*
            - kms:Update*
            - kms:Revoke*
            - kms:Disable*
            - kms:Get*
            - kms:Delete*
            - kms:ScheduleKeyDeletion
            - kms:CancelKeyDeletion
            - kms:GenerateDataKey
            - kms:Encrypt
            - kms:Decrypt
          Resource: '*'

################## INSTANCE PROFILE #####################

  WorkshopInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      InstanceProfileName: !Sub "snyk-and-aws-workshop-admin-${AWS::StackName}"
      Roles:
        - "snyk-and-aws-workshop-admin"

################## EKS Bootstrap #####################

  BuildProject:
    DependsOn: [WorkshopInstanceProfile]
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub CodeBuild-${AWS::StackName}
      ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/snyk-and-aws-workshop-admin"
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub "/aws/codebuild/CodeBuild-${AWS::StackName}"
          StreamName: build-log
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: WAIT_HANDLE_URL
            Value: !Ref EKSClusterWaitHandle
          - Name: KMS_ARN
            Value: !GetAtt KMSSecretsKey.Arn
          - Name: EKSClusterName
            Value: !Ref EKSClusterName
          - Name: AWSRegion
            Value: !Ref AWS::Region
          - Name: STACK_NAME
            Value: !Ref AWS::StackName
          - Name: KubernetesVersion
            Value: !Ref KubernetesVersion
          - Name: WorkerNodeInstanceType
            Value: !Ref WorkerNodeInstanceType
          - Name: VSCodeInstanceName
            Value: !Ref VSCodeInstanceName
          
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.12
              commands:
                - echo ">>> installed python 3.12"
                - export BUILD_SUCCESS=false
            pre_build:
              commands:
                - echo ">>> build cluster config with Region $AWSRegion"
                - |
                  cat << EOF > cluster-config.yaml
                  apiVersion: eksctl.io/v1alpha5
                  kind: ClusterConfig
                  availabilityZones:
                    - ${AWSRegion}a
                    - ${AWSRegion}b
                    - ${AWSRegion}c
                  metadata:
                    name: ${EKSClusterName}
                    region: ${AWSRegion}
                    version: "${KubernetesVersion}"
                  cloudWatch:
                    clusterLogging:
                      enableTypes: ["*"]
                  iam:
                    withOIDC: true
                  secretsEncryption:
                    keyARN: ${KMS_ARN}
                  managedNodeGroups:
                    - name: nodegroup
                      instanceType: ${WorkerNodeInstanceType}
                      desiredCapacity: 1
                      minSize: 1
                      maxSize: 2
                      privateNetworking: true
                      volumeSize: 100
                      volumeType: gp3
                      volumeEncrypted: true
                      tags:
                        'eks:cluster-name': ${EKSClusterName}
                        'stack-name': ${STACK_NAME}
                      iam:
                        withAddonPolicies:
                          imageBuilder: true
                          autoScaler: true
                          externalDNS: true
                          certManager: true
                          appMesh: true
                          ebs: true
                          fsx: true
                          efs: true
                          albIngress: true
                          xRay: true
                          cloudWatch: true
                  EOF
                - cat cluster-config.yaml
                - pip3 install --upgrade --user awscli
                - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
                - chmod +x ./kubectl
                - curl --silent --fail --retry 5 --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                - mv -v /tmp/eksctl /usr/local/bin
                - eksctl version
                - export PATH=$PWD/:$PATH
            build:
              commands:
                - echo ">>> creating EKS cluster in region $AWSRegion"
                - |
                  if eksctl create cluster -f cluster-config.yaml; then
                    export BUILD_SUCCESS=true
                    echo "EKS cluster creation successful"
                  else
                    echo "EKS cluster creation failed"
                    if [ -n "$WAIT_HANDLE_URL" ]; then
                      curl -X PUT -H 'Content-Type:' --data-binary '{"Status":"FAILURE","Reason":"EKS Cluster Creation Failed","UniqueId":"EKSCluster","Data":"EKS Cluster Creation Failed"}' "$WAIT_HANDLE_URL"
                      echo "Sent FAILURE signal to CloudFormation"
                    fi
                    exit 1
                  fi
            post_build:
              commands:
                - echo ">>> Post-build phase"
                - |
                  if [ "$BUILD_SUCCESS" = "true" ]; then 

                    # VSCode server integration (optional based on instance existence)
                    INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=VSCodeServer" --query "Reservations[].Instances[].InstanceId" --output text 2>/dev/null || echo "")
                    
                    if [ ! -z "$INSTANCE_ID" ]; then
                      echo ">>> Target Instance ID for SSM Command: $INSTANCE_ID"
                      
                      # Ensure Instance is Running Before Sending SSM Command
                      counter=0
                      max_attempts=30
                      INSTANCE_RUNNING=false
                      
                      while [ $counter -lt $max_attempts ]; do
                        STATUS=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[*].Instances[*].State.Name' --output text 2>/dev/null || echo "unknown")
                        if [ "$STATUS" = "running" ]; then
                          INSTANCE_RUNNING=true
                          break
                        fi
                        echo "Waiting for instance to be ready... Attempt $counter of $max_attempts"
                        sleep 10
                        counter=$((counter + 1))
                      done
                      
                      if [ "$INSTANCE_RUNNING" = "true" ]; then
                        # Send SSM command if document exists
                        if aws ssm describe-document --name "VSCodeK8sSetup" > /dev/null 2>&1; then
                          echo ">>> Triggering SSM Document execution..."
                          aws ssm send-command \
                            --document-name "VSCodeK8sSetup" \
                            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
                            --region $AWSRegion || echo "Failed to send SSM command"
                        else
                          echo "SSM Document 'VSCodeK8sSetup' not found - skipping integration"
                        fi
                      else
                        echo "WARNING: Instance is not running after $max_attempts attempts."
                      fi
                    else
                      echo "No VSCodeServer instance found - skipping VSCode integration"
                    fi
                  fi
                
                # Signal CloudFormation with success/failure status
                - |
                  echo "Signaling CloudFormation"
                  echo "WAIT_HANDLE_URL: $WAIT_HANDLE_URL"
                  
                  if [ -n "$WAIT_HANDLE_URL" ]; then
                    if [ "$BUILD_SUCCESS" = "true" ]; then
                      # Try to send SUCCESS signal, with retry logic
                      MAX_RETRIES=3
                      RETRY_COUNT=0
                      SIGNAL_SENT=false
                      
                      while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SIGNAL_SENT" != "true" ]; do
                        if curl -X PUT -H 'Content-Type:' --data-binary '{"Status":"SUCCESS","Reason":"EKS Cluster Created","UniqueId":"EKSCluster","Data":"Deployment Complete"}' "$WAIT_HANDLE_URL"; then
                          echo "Successfully sent SUCCESS signal to CloudFormation"
                          SIGNAL_SENT=true
                        else
                          RETRY_COUNT=$((RETRY_COUNT+1))
                          echo "Failed to send SUCCESS signal to CloudFormation (attempt $RETRY_COUNT/$MAX_RETRIES)"
                          if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                            echo "Retrying in 5 seconds..."
                            sleep 5
                          fi
                        fi
                      done
                      
                      if [ "$SIGNAL_SENT" != "true" ]; then
                        echo "All attempts to send SUCCESS signal failed. Sending FAILURE signal instead."
                        curl -X PUT -H 'Content-Type:' --data-binary '{"Status":"FAILURE","Reason":"Failed to send SUCCESS signal","UniqueId":"EKSCluster","Data":"Signal Transmission Failed"}' "$WAIT_HANDLE_URL" || echo "Also failed to send FAILURE signal."
                        exit 1
                      fi
                    else
                      echo "Build was not successful. Sending FAILURE signal."
                      curl -X PUT -H 'Content-Type:' --data-binary '{"Status":"FAILURE","Reason":"EKS Cluster Creation Failed","UniqueId":"EKSCluster","Data":"Post-build verification of failure"}' "$WAIT_HANDLE_URL" || echo "Failed to send FAILURE signal"
                    fi
                  else
                    echo "ERROR: WAIT_HANDLE_URL is not set."
                    exit 1
                  fi

  TriggerBuildLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Policies:
        - PolicyName: !Sub IAMPolicy-${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                    - codebuild:*
                Resource: !GetAtt BuildProject.Arn

  TriggerBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: function to trigger CodeBuild project
      Handler: index.handler
      Role: !GetAtt TriggerBuildLambdaIamRole.Arn
      Runtime: python3.12
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import logging
          import json
          import urllib.request
          import time

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          codebuild_client = boto3.client('codebuild')

          def handler(event, context):
              logger.info('Incoming Event: {0}'.format(event))
              response = {}
              response['PhysicalResourceId'] = 'codebuildtrigger-' + str(int(time.time()))
              response['StackId'] = event['StackId']
              response['RequestId'] = event['RequestId']
              response['LogicalResourceId'] = event['LogicalResourceId']

              if event['RequestType'] == 'Delete':
                  logger.info('Nothing to do. Request Type : {0}'.format(event['RequestType']))
                  response['Status'] = 'SUCCESS'
                  send_cfn_response(event, context, response['Status'], response)
              elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                  try:
                      # Log the environment variables we're passing to make debugging easier
                      wait_handle_url = event['ResourceProperties']['WaitHandleUrl']
                      logger.info(f"WaitHandleUrl being passed to CodeBuild: {wait_handle_url}")
                      
                      build = codebuild_client.start_build(
                          projectName=event['ResourceProperties']['CodebuildProjectName'],
                          environmentVariablesOverride=[
                              {
                                  'name': 'WAIT_HANDLE_URL',
                                  'value': wait_handle_url,
                                  'type': 'PLAINTEXT'
                              }
                          ]
                      )
                      logger.info(f"CodeBuild started with build ID: {build['build']['id']}")
                      response['Status'] = 'SUCCESS'
                      send_cfn_response(event, context, response['Status'], response)
                  except Exception as e:
                      logger.error('Error: {0}'.format(str(e)))
                      response['Status'] = 'FAILED'
                      response['Reason'] = str(e)
                      send_cfn_response(event, context, response['Status'], response)

          def send_cfn_response(event, context, response_status, response_data):
              response_body = json.dumps({
                  'Status': response_status,
                  'Reason': response_data.get('Reason', 'See the details in CloudWatch Log Stream: ' + context.log_stream_name),
                  'PhysicalResourceId': response_data.get('PhysicalResourceId', context.log_stream_name),
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              })

              headers = {
                  'content-type': '',
                  'content-length': str(len(response_body))
              }

              logger.info(f"Sending response to: {event['ResponseURL']}")
              
              req = urllib.request.Request(url=event['ResponseURL'], data=response_body.encode('utf-8'), headers=headers, method='PUT')

              try:
                  with urllib.request.urlopen(req) as response:
                      logger.info(f"Response sent. Status code: {response.getcode()}")
                      logger.info(f"Status message: {response.msg}")
              except Exception as e:
                  logger.error(f"Failed to send response: {str(e)}")
                
  CustomTriggerBuild:
    Type: Custom::TriggerBuild
    DependsOn: BuildProject
    Properties:
      ServiceToken: !GetAtt TriggerBuildLambda.Arn
      CodebuildProjectName: !Ref BuildProject
      WaitHandleUrl: !Ref EKSClusterWaitHandle


  EKSClusterWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref EKSClusterWaitHandle
      Timeout: '1800'  # 30 minutes
      Count: 1

  EKSClusterWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

Outputs:
  EKSClusterName:
    Description: EKS Cluster Name
    Value: !Ref EKSClusterName
  CloudFormationStack:
    Description: Stack name for reference in scripts
    Value: !Ref AWS::StackName